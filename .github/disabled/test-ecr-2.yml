name: ECR - aws-actions/amazon-ecr-login
run-name: ${{ github.actor }} is pushing to ECR
on: push

# Locally, the env vars will be set to inputted values, but on GH they should be null and 
# (i think) they are set by aws-actions/configure-aws-credentials@v1-node16 during authentication
env:
  SESSION_TYPE: 'github'
  AWS_DEFAULT_REGION: 'us-east-1'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  ECR_REPOSITORY: 'bks/testing'
  CONTAINER_REGISTRY_HOST: '223356124846.dkr.ecr.us-east-1.amazonaws.com'
  

jobs:
  test-erc:
    name: Test ECR Actions
    runs-on: ubuntu-latest

#################### (below) boiler plate stuff needed for each run ####################
   
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Local - Install dependencies
      if: ${{ env.SESSION_TYPE == 'local' }}
      run: |
        ##### awscli #####
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        ./aws/install > /dev/null
        apt-get -y install less

        ##### docker #####
        # apt-get -y remove docker docker-engine docker.io containerd runc
        apt-get -y install ca-certificates curl gnupg lsb-release
        mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
        apt-get update
        apt-get -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin
        docker -v

    - name: Checkout
      uses: actions/checkout@v3     

    - name: GitHub - Configure AWS credentials
      if: ${{ env.SESSION_TYPE == 'github' }}
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: arn:aws:iam::223356124846:role/bks_brian-sigurdson_gh-practice
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

#################### (above) boiler plate stuff needed for each run ####################

    # running on GitHub
    - name: GitHub - Login to Amazon ECR
      if: ${{ env.SESSION_TYPE == 'github' }}
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # running Locally
    - name: Local - Login to Amazon ECR
      if: ${{ env.SESSION_TYPE == 'local' }}
      run: aws ecr get-login-password --region ${{ env.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ env.CONTAINER_REGISTRY_HOST }}      

    # running on GitHub
    - name: GitHub - Build, tag, and push docker image to Amazon ECR
      if: ${{ env.SESSION_TYPE == 'github' }}
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: 'bks/testing'   
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./docker_stuff/
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    # running Locally
    - name: Local - Build, tag, and push docker image to Amazon ECR
      if: ${{ env.SESSION_TYPE == 'local' }}
      env:
        REGISTRY: ${{ env.CONTAINER_REGISTRY_HOST }}
        REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./docker_stuff/
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Local - rm -rf /root/.docker/config.json
      if: ${{ env.SESSION_TYPE == 'local' }}
      run: rm -rf /root/.docker/config.json

